# Pretty print the json
jq "." < filename.json

# Access the value at key "foo"
jq '.foo'

# Access first list item
jq '.[0]'

# Slice & Dice
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# jq filtering http://stedolan.github.io/jq/manual/#Basicfilters
http://grep.codeconsult.ch/2013/09/26/jq-sed-grep-and-awk-for-json/ customise jq output

# id of repo when namespace and project name provided
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects/| jq '.[] | select(.path_with_namespace == "someCompany_web_v2/symfony2") | .id’

# list repos of specific name space as a variable
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects | jq --arg ns "someCompany" '.[] | select(.namespace.path == $ns) | .path'

# list certain fields
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects/19/repository/tags | ./jq '.[] | {name}’

# list tags with version sorting
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects/19/repository/tags | ./jq '.[].name' | grep -i "release" | sort -rV

# filter and list repos from name space
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects | jq '.[] | select(.namespace.path == "someCompany") | .path'

# filter down to specific repo and namespace, multi select
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects | jq '.[] | select(.namespace.path == "someCompany") | select(.path == "common")'

# grab id of file
curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects/19/repository/tree?path=config/prod  | ./jq '.[] | {name,id}'

rundeck options file example:

#!/bin/bash
declare -a RELEASES
RELEASES=($(curl --header "PRIVATE-TOKEN: someKey" -k -s https://gitlab.dev.someCompany.com/api/v3/projects/19/repository/tags | jq '.[].name' | grep -i "release" | sort -rV))
pos=$(( ${#RELEASES[*]} -1 ))
last=$(echo ${RELEASES[$pos]})
#echo "pos = $pos and last = $last"
echo 'Content-Type: application/json'
echo ""
echo '['
for release in "${RELEASES[@]}"
do
  if [[ $release == $last ]]
  then
    echo "$release"
  else
    echo "$release",
  fi
done
echo ']'


# add element to an existing array (redirect to a file)
cat userMappings.json | jq '.github_to_slack += [{"slack": "zzzslack", "github": "zzzgithub"}]'

# concatenate / combine json objects / files
jq -s '.[0].bla[] * .[1]' file1 file2
# concatenate string
cat someJson.json | jq '.bla[] += { "greeting": "bye bye" }'

# add element to existing array
echo '[]' | jq '.[. | length] |= . + "bla"'
JSONLIST=$(echo $JSONLIST | jq --arg row "$i" '.[. | length] |= . + $row')
