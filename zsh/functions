join_by () { local d="$1"; shift; local f="$1"; shift; printf %s "$f" "${@/#/$d}"; }

towork-mns() {
    local WORKDIR="~/repos/mns"
    local SESSION="mns"

    echo "creating session..."
    tmux kill-session -t $SESSION &>/dev/null || true
    tmux new-session -d -s $SESSION
    tmux send-keys -t $SESSION:1 "cd $WORKDIR && v src/main.rs" Enter
    tmux new-window -t $SESSION:2 -n "Build"
    tmux split-window -h -t $SESSION:2
    tmux send-keys -t $SESSION:2.1 "cd $WORKDIR && cargo watch --watch src -- cargo run -- --port 8080 --dhcp-lease-file "dhcpd.lease"" Enter
    tmux send-keys -t $SESSION:2.2 "sleep 5 && cd $WORKDIR && cargo watch -- cargo test -- --nocapture" Enter
    # tmux attach-session -t $SESSION:1.1
}

towork-cam-install() {
    local WORKDIR="~/repos/camera-install/rust"
    local SESSION="cam-install"

    echo "creating session..."
    tmux kill-session -t $SESSION &>/dev/null || true
    tmux new-session -d -s $SESSION
    tmux send-keys -t $SESSION:1 "cd $WORKDIR && v ." Enter
    tmux new-window -t $SESSION:2 -n "Build"
    tmux split-window -h -t $SESSION:2
    tmux send-keys -t $SESSION:2.1 "cd $WORKDIR && ./scripts/dev.sh" Enter
    tmux send-keys -t $SESSION:2.2 "cd ~/Downloads/rtsp && ./rtsp-simple-server" Enter
    sleep 5
    xdg-open "http://localhost:8080"
    # tmux attach-session -t $SESSION:1.1
}

kctx () {
    local context
    if [ -z $1 ]; then
        context=$(kubectl config get-contexts -o name | fzf)
    else
        context="$1"
    fi
    kubectl config use-context "$context"
}

# bastion-sainsburys() {
#     #mfab $(gopass otp te/sainsburys/bastion | cut -d' ' -f1)
#     gopass otp -c te/sainsburys/bastion | cut -d' ' -f1
#     sshuttle -v -r yusuf@sainsburys-gcloud-bastion-01 10.0.0.0/8 172.31.146.0/24 172.20.3.0/24
# }
#
# bastion-mns() {
#     gopass otp -c te/sainsburys/bastion | cut -d' ' -f1
#     sshuttle -v -r yusuf@mns-gcloud-bastion-01 10.159.218.0/24 10.222.0.0/16
# }

git-switch() {
    cd $HOME
    local prefix current new
    prefix=".gitconfig"
    real=$(readlink $prefix)
    current=${real#${prefix}.}

    if [[ ! -z $1 && $1 == "status" ]]; then
        echo "$current"
        return
    fi

    case "$current" in
        home) new=work ;;
        work) new=home ;;
    esac

    rm -f "$prefix"
    ln -snf "${prefix}.${new}" "$prefix"

    echo "Old config $current replaced with $new"
    [ -z $TMUX ] || tmux refresh-client -S
}

# ai_online () {
#     for i in $(grep -oE 'sainsburys-store-[a-z]{1,}.*' ~/.ssh/config)
#     do
#         ssh -o ConnectTimeout=5 "$i" hostname 2>/dev/null
#     done
# }
#
dhcp_status() {
    sudo systemctl status dhcpd
}

dhcp_start() {
    sudo systemctl start dhcpd
    dhcp_status
}

dhcp_stop() {
    sudo systemctl stop dhcpd
    dhcp_status
}

kvmon() {
    # https://wiki.archlinux.org/index.php/HiDPI#Java_applications
    xhost +
    #sudo java -jar /run/media/yusuf/9279-375D/JavaClient.jar
    sudo java -Dsun.java2d.uiScale=2 -jar /run/media/yusuf/9279-375D/JavaClient.jar
    xhost -
}

edge-gcr() {
  local tag reg
  tag="$1"
  reg="$2"
  oldimage="europe-west1-docker.pkg.dev/thirdeyelabs-common/internal/edge-prod-cuda10.0-amd64:${tag}"
  newimage="europe-west1-docker.pkg.dev/thirdeyelabs-common/${reg}/edge-prod-cuda10.0-amd64:${tag}"
  [ -z $tag ] && { echo "you need to provide the tag!"; exit 1; }

  echo "Caching image locally"
  docker pull $oldimage
  echo "Re-tagging with new client registry"
  docker tag $oldimage $newimage
  echo "Pushing image..."
  docker push $newimage
  echo "$reg image:"
  echo "$newimage"
}

wgon() {
    sudo systemctl start wg-quick@wg1
}

wgoff() {
    sudo systemctl stop wg-quick@wg1
}

cht() {
    local topic query
    topic="$1"
    query="$(echo ${@:2} | tr ' ' '+')"
    curl "$(printf "http://cht.sh/%s/%s" "$topic" "$query")"

}

# bvpn() {
#     local action="$1"
#     local gpentry="te/carrefour/vpn"
#
#
#     if [ "$action" = "start" ]; then
#         local u=$(gopass show $gpentry username)
#         local p=$(gopass show $gpentry --password)
#         sudo barracudavpn ${2:-} --start --login $u --serverpwd $p
#         barracudavpn --status
#     else
#         barracudavpn --stop
#     fi
# }
#
# rtag() {
#     local repo="$1"
#     local dest="europe-west1-docker.pkg.dev/thirdeyelabs-common/test/${repo}"
#
#     docker pull $repo
#     docker tag $repo $dest
#     docker push $dest
# }



tfvars() {
    export TF_VAR_oidc_client_secret=$(gopass show misc/work-vault-oidc)
    export TF_VAR_pagerduty_service_key=$(gopass show misc/work-pagerduty-service-key)
    export TF_VAR_slack_auth_token=$(gopass show misc/work-slack-auth-token)
    export TF_VAR_jenkins_user_github_token=$(gopass show misc/work-jenkins-user-github-token)
    export TF_VAR_oauth2_client_id=$(gopass show misc/work-oauth2-client-id)
    export TF_VAR_oauth2_client_secret=$(gopass show misc/work-oauth2-client-secret)
    export TF_VAR_old_pypi_download_password=$(gopass show misc/work-old-pypi-download-password)
    export TF_VAR_old_pypi_password=$(gopass show misc/work-old-pypi-password)
    export TF_VAR_pypi_api_key=$(gopass show misc/work-pypi-api-key)
    export TF_VAR_pypi_download_api_key=$(gopass show misc/work-pypi-download-api-key)
    export TF_VAR_sentry_token=$(gopass show misc/work-sentry)
}

# git worktree delete and also delete the branch
# (infrastructure repo)
gwd() {
    local branch="$(git rev-parse --abbrev-ref HEAD)"
    cd ~/repos/infrastructure
    git worktree remove $branch
    git branch -D $branch
}

bucket_project() {
    local bucket="${1##*/}"
    local project_id

    project_id=$(gsutil ls -L -b "gs://${bucket}" | grep projectNumber | grep -oE "[0-9]*" | head -n1)
    gcloud projects list | grep "$project_id"
}

work() {
    xdotool type 'tfvars' && xdotool key Return
    xdotool type 'cvs' && xdotool key Return && sleep 2
    xdotool type 'tmux' && xdotool key Return
    xdotool type '`'
    xdotool key ctrl+r
}

off() {
    # save tmux session and exit tmux
    if [ ! -z $TMUX ]; then
        xdotool type '`'
        xdotool key ctrl+s
        xdotool type '`'
        xdotool key d
    fi
    # update
    sudo dnf update -y

    # shutdown
    while true; do
        poweroff || true # systemd-inhibitors.....
        sleep 5
    done
}

# vim: set ft=sh:

